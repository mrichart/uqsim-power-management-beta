# This file is used to generate the microservices, machines, graph and path for the 4-tier architecture
# The microservices are generated by calling the python files that generate the microservices
# The machines are generated by calling the corresponding file. There is a file for each network configuration
# The graph is generated by calling the graph.py file with the corresponding parameters (number of threads, cores and machines for each microservice)
# The path is generated by calling the path.py file

import subprocess
import argparse
import os

def parse_arguments():
    parser = argparse.ArgumentParser(description='Generate a service graph with input arguments')
    parser.add_argument('--end_seconds', type=int, default=60, help='Epoch end time in seconds')
    parser.add_argument('--monitor_interval', type=int, default=0, help='Interval at which the client will monitor the system (in seconds)')

    parser.add_argument('--machinesFile', type=str, default='machines.py', help='File that contains the machines configuration')
    
    parser.add_argument('--ngxThreads', type=int, default=8, help='Number of Nginx threads')
    parser.add_argument('--phpThreads', type=int, default=8, help='Number of PHP threads')
    parser.add_argument('--phpIOThreads', type=int, default=8, help='Number of PHP IO threads')
    parser.add_argument('--mmcThreads', type=int, default=8, help='Number of Memcached threads')
    parser.add_argument('--mongoThreads', type=int, default=8, help='Number of MongoDB threads')
    parser.add_argument('--mongoIOThreads', type=int, default=1, help='Number of MongoDB IO threads')

    parser.add_argument('--ngxCores', type=int, default=4, help='Number of cores assigned to NGINX')
    parser.add_argument('--phpCores', type=int, default=4, help='Number of cores assigned to PHP')
    parser.add_argument('--phpIOCores', type=int, default=1, help='Number of cores assigned to PHP IO')
    parser.add_argument('--mmcCores', type=int, default=4, help='Number of cores assigned to Memcached')
    parser.add_argument('--mongoCores', type=int, default=4, help='Number of cores assigned to MongoDB')
    parser.add_argument('--mongoIOCores', type=int, default=1, help='Number of cores assigned to MongoDB IO')
    
    parser.add_argument('--machNxg', type=int, default=0, help='Machine ID where NGINX is deployed')
    parser.add_argument('--machPhp', type=int, default=2, help='Machine ID where PHP is deployed')
    parser.add_argument('--machPhpIO', type=int, default=2, help='Machine ID where PHP IO is deployed')
    parser.add_argument('--machMmc', type=int, default=1, help='Machine ID where Memcached is deployed')
    parser.add_argument('--machMongo', type=int, default=3, help='Machine ID where MongoDB is deployed')
    parser.add_argument('--machMongoIO', type=int, default=3, help='Machine ID where MongoDB IO is deployed')
    args = parser.parse_args()
    return args

# Generate microservices
def generate_microservices():
    try:
        #Call net_stack.py
        proc = subprocess.run(['python3', 'net_stack.py'])
        if proc.returncode == 0:
            print("net_stack.py successfully executed")

        # Call nginx.py
        proc = subprocess.run(['python3', 'nginx.py'])
        if proc.returncode == 0:
            print("nginx.py successfully executed")

        # Call memcached.py
        proc = subprocess.run(['python3', 'memcached.py'])
        if proc.returncode == 0:
            print("memcached.py successfully executed")

        # Call php.py
        proc = subprocess.run(['python3', 'php.py'])
        if proc.returncode == 0:
            print("php.py successfully executed")

        # Call php_io.py
        proc = subprocess.run(['python3', 'php_io.py'])
        if proc.returncode == 0:
            print("php_io.py successfully executed")

        # Call mongodb.py
        proc = subprocess.run(['python3', 'mongodb.py'])
        if proc.returncode == 0:
            print("mongodb.py successfully executed")

        # Call mongo_io.py
        proc = subprocess.run(['python3', 'mongo_io.py'])
        if proc.returncode == 0:
            print("mongo_io.py successfully executed")

    except FileNotFoundError as e:
        print(e)

def geneate_client(end_seconds, monitor_interval):
    try:
        # Call client.py
        proc = subprocess.run(['python3', 'client.py'], input=f"--end_seconds {end_seconds} --monitor_interval {monitor_interval}".encode('utf-8'))
        if proc.returncode == 0:
            print("client.py successfully executed")

    except FileNotFoundError as e:
        print(e)

def generate_machines(file):
    try:
        # Call machines.py
        proc = subprocess.run(['python3', file])
        if proc.returncode == 0:
            print("machines.py successfully executed")

    except FileNotFoundError as e:
        print(e)

def generate_graph(ngxThreads, phpThreads, phpIOThreads, mmcThreads, mongoThreads, mongoIOThreads, ngxCores, phpCores, phpIOCores, mmcCores, mongoCores, mongoIOCores, machNxg, machPhp, machPhpIO, machMmc, machMongo, machMongoIO):
    try:
        # Call graph.py
        proc = subprocess.run(['python3', 'graph.py'], input="--ngxThreads {ngxThreads} --phpThreads {phpThreads} --phpIOThreads {phpIOThreads} --mmcThreads {mmcThreads} --mongoThreads {mongoThreads} --mongoIOThreads {mongoIOThreads} --ngxCores {ngxCores} --phpCores {phpCores} --phpIOCores {phpIOCores} --mmcCores {mmcCores} --mongoCores {mongoCores} --mongoIOCores {mongoIOCores} --machNxg {machNxg} --machPhp {machPhp} --machPhpIO {machPhpIO} --machMmc {machMmc} --machMongo {machMongo} --machMongoIO {machMongoIO}".encode('utf-8'))
        if proc.returncode == 0:
            print("graph.py successfully executed")

    except FileNotFoundError as e:
        print(e)

def generate_path():
    try:
        # Call path.py
        proc = subprocess.run(['python3', 'path.py'])
        if proc.returncode == 0:
            print("path.py successfully executed")

    except FileNotFoundError as e:
        print(e)

def main():
    os.makedirs("json/microservice")
    args = parse_arguments()
    generate_microservices()
    geneate_client(args.end_seconds, args.monitor_interval)
    generate_machines(args.machinesFile)
    generate_graph(args.ngxThreads, args.phpThreads, args.phpIOThreads, args.mmcThreads, args.mongoThreads, args.mongoIOThreads, args.ngxCores, args.phpCores, args.phpIOCores, args.mmcCores, args.mongoCores, args.mongoIOCores, args.machNxg, args.machPhp, args.machPhpIO, args.machMmc, args.machMongo, args.machMongoIO)
    generate_path()

if __name__ == "__main__":
    main()